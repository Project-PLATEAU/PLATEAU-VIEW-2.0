name: server-build
on:
  workflow_run:
    workflows: [ci-server]
    types: [completed]
    branches: [main, release]
concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  info:
    name: Collect information
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'failure' && github.event.repository.full_name == 'reearth/reearth-cms' && (github.event.workflow_run.head_branch == 'release' || !startsWith(github.event.head_commit.message, 'v'))
    outputs:
      sha_short: ${{ steps.info.outputs.sha_short }}
      new_tag: ${{ steps.info.outputs.new_tag }}
      new_tag_short: ${{ steps.info.outputs.new_tag_short }}
      name: ${{ steps.info.outputs.name }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Fetch tags
        run: git fetch --prune --unshallow --tags
      - name: Get info
        id: info
        # The tag name should be retrieved lazily, as tagging may be delayed.
        env:
          BRANCH: ${{ github.event.workflow_run.head_branch }}
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          if [[ "$BRANCH" = "release" ]]; then
            TAG=$(git tag --points-at HEAD)
            if [[ ! -z "$TAG" ]]; then
              echo "::set-output name=new_tag::$TAG"
              echo "::set-output name=new_tag_short::${TAG#v}"
            else
                echo "::set-output name=name::rc"
            fi
          else
            echo "::set-output name=name::nightly"
          fi
      - name: Show info
        env:
          SHA_SHORT: ${{ steps.info.outputs.sha_short }}
          NEW_TAG: ${{ steps.info.outputs.new_tag }}
          NEW_TAG_SHORT: ${{ steps.info.outputs.new_tag_short }}
          NAME: ${{ steps.info.outputs.name }}
        run: echo "sha_short=$SHA_SHORT, new_tag=$NEW_TAG, new_tag_short=$NEW_TAG_SHORT, name=$NAME"

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs:
      - info
    if: needs.info.outputs.name || needs.info.outputs.new_tag
    env:
      IMAGE_NAME: reearth/reearth-cms
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get options
        id: options
        env:
          TAG: ${{ needs.info.outputs.tag_short }}
          NAME: ${{ needs.info.outputs.name }}
          SHA: ${{ needs.info.outputs.sha_short }}
        run: |
          if [[ -n $TAG ]]; then
            PLATFORMS=linux/amd64,linux/arm64
            VERSION=$TAG
            TAGS=$IMAGE_NAME:$TAG
            if [[ ! $TAG =~ '-' ]]; then
              TAGS+=,${IMAGE_NAME}:${TAG%.*}
              TAGS+=,${IMAGE_NAME}:${TAG%%.*}
              TAGS+=,${IMAGE_NAME}:latest
            fi
          else
            PLATFORMS=linux/amd64
            VERSION=$SHA
            TAGS=$IMAGE_NAME:$NAME
          fi
          echo "::set-output name=platforms::$PLATFORMS"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=tags::$TAGS"
      - name: Fetch reearth-cms-web
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: ci_web.yml
          workflow_conclusion: success
          branch: main
          name: reearth-cms-web
          path: server
          check_artifacts: true
          search_artifacts: true
      - name: Extract reearth-cms-web
        run: tar -xvf server/reearth-cms-web.tar.gz; mv reearth-cms-web server/web; ls
      - name: Build and push docker image
        uses: docker/build-push-action@v3
        with:
          context: ./server
          platforms: ${{ steps.options.outputs.platforms }}
          push: true
          build-args: VERSION=${{ steps.options.outputs.version }}
          tags: ${{ steps.options.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
